"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/opensea/events/[address]";
exports.ids = ["pages/api/opensea/events/[address]"];
exports.modules = {

/***/ "web3":
/*!***********************!*\
  !*** external "web3" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("web3");

/***/ }),

/***/ "./lib/opensea/collections.ts?ca6c":
/*!************************************!*\
  !*** ./lib/opensea/collections.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAssetsForOwner\": () => (/* binding */ getAssetsForOwner),\n/* harmony export */   \"getCollectionStats\": () => (/* binding */ getCollectionStats),\n/* harmony export */   \"pruneAndRemoveDuplicateCollections\": () => (/* binding */ pruneAndRemoveDuplicateCollections),\n/* harmony export */   \"pruneAsset\": () => (/* binding */ pruneAsset),\n/* harmony export */   \"fetchOpenseaCollectionFromContractAddress\": () => (/* binding */ fetchOpenseaCollectionFromContractAddress),\n/* harmony export */   \"getAllAssetsFromCollections\": () => (/* binding */ getAllAssetsFromCollections)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"web3\");\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./lib/opensea/config.ts?91fe\");\n\n\nconst getAssetsForOwner = async (ownerAddress)=>{\n    let totalAssets = [];\n    // Infinite loop until all assets are fetched\n    while(1){\n        // Construct request url\n        const url = `https://api.opensea.io/api/v1/assets?owner=${ownerAddress}&order_direction=desc&offset=${totalAssets.length}&limit=50`;\n        console.log(`   Making Opensea API Call: ${url}`);\n        // Fetch with address and the current offset set to the number of already fetched assets\n        const resp = await fetch(url, _config__WEBPACK_IMPORTED_MODULE_1__.openseaFetchHeaders);\n        const { assets , detail  } = await resp.json();\n        // This means the request was throttled\n        if (detail) {\n            console.error(`Opensea assets for owner ${ownerAddress}: ${detail}`);\n            throw new Error(detail);\n        }\n        if (assets) {\n            totalAssets = [\n                ...totalAssets,\n                ...assets\n            ];\n            // If we get less than the limit of 50 assets, we know we've fetched everything\n            if (assets.length < 50) break;\n        } else {\n            console.error(`Could not fetch assets for endpoint: ${url}`);\n            break;\n        }\n    }\n    return totalAssets;\n};\n/**\n * Fetches the collection stats from the opensea API /collection/{slug}/stats endpoint\n */ const getCollectionStats = async (slug)=>{\n    const url = `https://api.opensea.io/api/v1/collection/${slug}/stats`;\n    console.log(`   Making Opensea API Call: ${url}`);\n    const { stats , detail , error: error1  } = await fetch(url, _config__WEBPACK_IMPORTED_MODULE_1__.openseaFetchHeaders).then((response)=>response.json()\n    ).catch((error)=>{\n        return {\n            error\n        };\n    });\n    // This could mean that the collection under this slug no longer exists (404)\n    if (error1) {\n        console.error(`Error fetching stats for slug ${slug}: ${error1.toString()}`);\n        return null;\n    }\n    // This means the request was throttled\n    if (detail) {\n        console.error(`\\nOpensea collection stats ${slug}: ${detail}\\n`);\n        throw new Error(`Opensea throttled request for ${slug} (${url})`);\n    }\n    return stats;\n};\n/**\n * Extracts ICollection's from Opensea assets\n * @param assets Opensea asset data returned from /assets endpoint\n */ const pruneAndRemoveDuplicateCollections = (assets)=>{\n    // Create an object where the key is the collection slug and the value is the pruned collection data\n    const byCollection = assets.reduce((acc, asset)=>{\n        const { collection  } = asset;\n        // Add the pruned collection to the accumulated object if not already there\n        if (!acc[collection.slug]) {\n            // Prune the collection\n            const prunedCollection = {\n                contract_address: asset.asset_contract.address,\n                name: collection.name,\n                slug: collection.slug,\n                image_url: collection.image_url,\n                twitter_username: collection.twitter_username,\n                discord_url: collection.discord_url,\n                external_url: collection.external_url\n            };\n            acc[collection.slug] = prunedCollection;\n        }\n        return acc;\n    }, {\n    });\n    return Object.values(byCollection);\n};\n/**\n * Turns Opensea asset into IAsset\n * @param assets Opensea asset data returned from /assets endpoint\n */ const pruneAsset = (asset)=>{\n    return {\n        name: asset.name,\n        contract_address: asset.asset_contract.address,\n        description: asset.description,\n        image_url: asset.image_url,\n        link: asset.permalink,\n        token_id: asset.token_id,\n        last_sale: asset.last_sale ? parseFloat(web3__WEBPACK_IMPORTED_MODULE_0___default().utils.fromWei(asset.last_sale.total_price)) : undefined\n    };\n};\n/**\n * Takes a contract address and fetches the collection data from opensea\n * @param contractAddress the address of the nft collection\n * @returns a pruned opensea collection\n */ const fetchOpenseaCollectionFromContractAddress = async (contractAddress)=>{\n    const url = `https://api.opensea.io/api/v1/asset_contract/${contractAddress}`;\n    console.log(`   Making Opensea API Call: ${url}`);\n    const result = await fetch(url).then((res)=>res.json()\n    );\n    const { collection , detail  } = result;\n    // This means request was throttled\n    if (detail) {\n        console.error(`Request for opensea asset_contract ${contractAddress}: ${detail}`);\n        throw new Error(detail);\n    }\n    const prunedCollection = {\n        contract_address: contractAddress,\n        name: collection.name,\n        slug: collection.slug,\n        image_url: collection.image_url,\n        twitter_username: collection.twitter_username,\n        discord_url: collection.discord_url,\n        external_url: collection.external_url\n    };\n    return prunedCollection;\n};\n/**\n * Extracts all IAssets from an ICollectionsWithAssets object\n * @param collectionsWithAssets The ICollectionsWithAssets object\n * @returns All IAssets\n */ const getAllAssetsFromCollections = (collectionsWithAssets)=>{\n    return Object.values(collectionsWithAssets).reduce((acc, curr)=>{\n        return [\n            ...acc,\n            ...curr.assets\n        ];\n    }, []);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/opensea/collections.ts?ca6c\n");

/***/ }),

/***/ "./lib/opensea/config.ts?91fe":
/*!*******************************!*\
  !*** ./lib/opensea/config.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"openseaFetchHeaders\": () => (/* binding */ openseaFetchHeaders)\n/* harmony export */ });\n// This just modularizes the opensea fetch header used in all opensea API fetches\n// Fetch opensea API key\nconst openseaAPIKey = process.env.OPENSEA_API_KEY;\n// Warn if the opensea API key is not available\nif (!openseaAPIKey) console.warn('Cannot find opensea API key (OPENSEA_API_KEY)');\n// Construct header object to pass api key to each fetch\nconst openseaFetchHeaders = {\n    headers: {\n        // Attach the opensea API key as a header if it's available\n        ...openseaAPIKey && {\n            'X-API-KEY': openseaAPIKey\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvb3BlbnNlYS9jb25maWcudHM/OTFmZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsRUFBaUY7QUFFakYsRUFBd0I7QUFDeEIsS0FBSyxDQUFDQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxlQUFlO0FBRWpELEVBQStDO0FBQy9DLEVBQUUsR0FBR0gsYUFBYSxFQUFFSSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUErQztBQUVoRixFQUF3RDtBQUNqRCxLQUFLLENBQUNDLG1CQUFtQixHQUFHLENBQUM7SUFDbENDLE9BQU8sRUFBRSxDQUFDO1FBQ1IsRUFBMkQ7V0FDdkRQLGFBQWEsSUFBSSxDQUFDO1lBQUMsQ0FBVyxZQUFFQSxhQUFhO1FBQUMsQ0FBQztJQUNyRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhcGUtbW9uaXRvci93d3cvLi9saWIvb3BlbnNlYS9jb25maWcudHM/OWM1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGp1c3QgbW9kdWxhcml6ZXMgdGhlIG9wZW5zZWEgZmV0Y2ggaGVhZGVyIHVzZWQgaW4gYWxsIG9wZW5zZWEgQVBJIGZldGNoZXNcblxuLy8gRmV0Y2ggb3BlbnNlYSBBUEkga2V5XG5jb25zdCBvcGVuc2VhQVBJS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTlNFQV9BUElfS0VZXG5cbi8vIFdhcm4gaWYgdGhlIG9wZW5zZWEgQVBJIGtleSBpcyBub3QgYXZhaWxhYmxlXG5pZiAoIW9wZW5zZWFBUElLZXkpIGNvbnNvbGUud2FybignQ2Fubm90IGZpbmQgb3BlbnNlYSBBUEkga2V5IChPUEVOU0VBX0FQSV9LRVkpJylcblxuLy8gQ29uc3RydWN0IGhlYWRlciBvYmplY3QgdG8gcGFzcyBhcGkga2V5IHRvIGVhY2ggZmV0Y2hcbmV4cG9ydCBjb25zdCBvcGVuc2VhRmV0Y2hIZWFkZXJzID0ge1xuICBoZWFkZXJzOiB7XG4gICAgLy8gQXR0YWNoIHRoZSBvcGVuc2VhIEFQSSBrZXkgYXMgYSBoZWFkZXIgaWYgaXQncyBhdmFpbGFibGVcbiAgICAuLi4ob3BlbnNlYUFQSUtleSAmJiB7ICdYLUFQSS1LRVknOiBvcGVuc2VhQVBJS2V5IH0pLFxuICB9LFxufVxuIl0sIm5hbWVzIjpbIm9wZW5zZWFBUElLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTlNFQV9BUElfS0VZIiwiY29uc29sZSIsIndhcm4iLCJvcGVuc2VhRmV0Y2hIZWFkZXJzIiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/opensea/config.ts?91fe\n");

/***/ }),

/***/ "./lib/opensea/events.ts":
/*!*******************************!*\
  !*** ./lib/opensea/events.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEventsForOwner\": () => (/* binding */ getEventsForOwner),\n/* harmony export */   \"unbundleEvent\": () => (/* binding */ unbundleEvent),\n/* harmony export */   \"unbundleEvents\": () => (/* binding */ unbundleEvents),\n/* harmony export */   \"getEventsBySuccessfulSalesAndBuys\": () => (/* binding */ getEventsBySuccessfulSalesAndBuys),\n/* harmony export */   \"getTradesByCollectionAndTradeStatsForOwner\": () => (/* binding */ getTradesByCollectionAndTradeStatsForOwner),\n/* harmony export */   \"pruneEvent\": () => (/* binding */ pruneEvent)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"web3\");\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./lib/opensea/config.ts?91fe\");\n/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collections */ \"./lib/opensea/collections.ts?ca6c\");\n\n\n\n/**\n * Fetches the events (buy/sells) for a given address\n */ const getEventsForOwner = async (ownerAddress)=>{\n    let totalAssetEvents = [];\n    const limit = 300;\n    const maxIterations = 1;\n    let currentIteration = 0;\n    while(currentIteration < maxIterations){\n        currentIteration++;\n        // Construct request url\n        const url = `https://api.opensea.io/api/v1/events?account_address=${ownerAddress}&only_opensea=false&offset=${totalAssetEvents.length}&limit=${limit}`;\n        console.log(`   Making Opensea API Call: ${url}`);\n        // Fetch with address and the current offset set to the number of already fetched asset_events\n        const { asset_events  } = await fetch(url, _config__WEBPACK_IMPORTED_MODULE_1__.openseaFetchHeaders).then((resp)=>resp.json()\n        );\n        if (asset_events) {\n            totalAssetEvents = [\n                ...totalAssetEvents,\n                ...asset_events\n            ];\n            // If we get less than the limit of 50 asset_events, we know we've fetched everything\n            if (asset_events.length < limit) break;\n        } else {\n            console.error(`Could not fetch events for endpoint: ${url}`);\n            break;\n        }\n    }\n    return totalAssetEvents;\n};\nconst unbundleEvent = (bundledEvent)=>{\n    console.warn(`Reached unbundle event!!!`);\n    if (bundledEvent.asset_bundle) {\n        return bundledEvent.asset_bundle.assets.map((asset)=>{\n            return {\n                ...bundledEvent,\n                ...asset\n            };\n        });\n    } else {\n        return [\n            bundledEvent\n        ];\n    }\n};\nconst unbundleEvents = (events)=>{\n    const unbundledEvents = events.reduce((acc, event)=>{\n        if (event.asset_bundle) {\n            for (const unbundledEvent of unbundleEvent(event)){\n                acc.push(unbundledEvent);\n            }\n        } else {\n            acc.push(event);\n        }\n        return acc;\n    }, []);\n    return unbundledEvents;\n};\nconst getEventsBySuccessfulSalesAndBuys = (events, ownerAddress)=>{\n    // Filter for successful event_types\n    const successfulEvents = events.filter((event)=>event.event_type === 'successful'\n    );\n    // Retrieve sales\n    const sales = successfulEvents.reduce((acc, event)=>{\n        // Trade order is just a unique id to match across sale/buy events\n        const tradeOrder = event.asset ? event.asset.permalink : event.asset_bundle.permalink;\n        if (event.seller && event.seller.address.toLowerCase() === ownerAddress) acc[tradeOrder] = event;\n        return acc;\n    }, {\n    });\n    // Retrieve buys\n    const buys = successfulEvents.reduce((acc, event)=>{\n        const tradeOrder = event.asset ? event.asset.permalink : event.asset_bundle.permalink;\n        if (event.winner_account && event.winner_account.address.toLowerCase() === ownerAddress) acc[tradeOrder] = event;\n        return acc;\n    }, {\n    });\n    return {\n        sales,\n        buys\n    };\n};\n/**\n *  Does the data-wrangling work for turning events into usable stats\n * @param events List of events returned from getEventsForOwner\n * @param ownerAddress Owner address of these assets\n * @returns\n */ const getTradesByCollectionAndTradeStatsForOwner = (sales, buys)=>{\n    // Retrieve sales that have a matching buy and calculate total stats\n    const tradesByCollection = Object.keys(sales).reduce((acc, saleId)=>{\n        // Only include trade if there is a matching buy\n        if (Object.keys(buys).includes(saleId)) {\n            // Fetch matched sale and buy trades\n            const sale = sales[saleId];\n            const buy = buys[saleId];\n            // Fetch sale and buy prices for this asset\n            const salePrice = parseFloat(web3__WEBPACK_IMPORTED_MODULE_0___default().utils.fromWei(sale.total_price));\n            const buyPrice = parseFloat(web3__WEBPACK_IMPORTED_MODULE_0___default().utils.fromWei(buy.total_price));\n            // Get profit for this asset\n            const profit = salePrice - buyPrice;\n            // Get sale and buy dates for this asset\n            const saleDate = Date.parse(sale.created_date);\n            const buyDate = Date.parse(buy.created_date);\n            // Get the hold time\n            const holdTime = saleDate - buyDate;\n            // Prepare the asset data\n            const prunedAsset = {\n                image_thumbnail_url: sale.asset.image_thumbnail_url,\n                name: sale.asset.name,\n                salePrice,\n                buyPrice,\n                profit,\n                buyDate,\n                saleDate,\n                holdTime\n            };\n            // Fetch collection\n            const { collection  } = sale.asset;\n            if (acc[collection.slug]) {\n                // If the collection has been seen before, calculate new total stats and add the asset to its array\n                // Number of assets traded under this collection so far\n                const numAssetsSoFar = acc[collection.slug].assets.length;\n                // Calculate average sale price\n                const averageSalePriceSoFar = acc[collection.slug].averageSalePrice;\n                const averageSalePrice = (averageSalePriceSoFar * numAssetsSoFar + salePrice) / (numAssetsSoFar + 1);\n                // Calculate average buy price\n                const averageBuyPriceSoFar = acc[collection.slug].averageBuyPrice;\n                const averageBuyPrice = (averageBuyPriceSoFar * numAssetsSoFar + buyPrice) / (numAssetsSoFar + 1);\n                // Calculate total profit\n                const totalProfit = acc[collection.slug].totalProfit + profit;\n                // Calculate average hold time\n                const averageHoldTimeSoFar = acc[collection.slug].averageHoldTime;\n                const averageHoldTime = (averageHoldTimeSoFar * numAssetsSoFar + holdTime) / (numAssetsSoFar + 1);\n                acc[collection.slug] = {\n                    // Maintain old collection data\n                    ...acc[collection.slug],\n                    // Add new asset to array\n                    assets: [\n                        ...acc[collection.slug].assets,\n                        prunedAsset\n                    ],\n                    // Updated stats\n                    averageSalePrice,\n                    averageBuyPrice,\n                    averageHoldTime,\n                    totalProfit\n                };\n            } else {\n                // If this is a new collection, prune the data and initialize its object\n                // Prepare the collection data\n                const prunedCollection = {\n                    name: collection.name,\n                    slug: collection.slug,\n                    image_url: collection.image_url\n                };\n                // Calculate total stats\n                acc[collection.slug] = {\n                    ...prunedCollection,\n                    assets: [\n                        prunedAsset\n                    ],\n                    totalProfit: profit,\n                    averageSalePrice: salePrice,\n                    averageBuyPrice: buyPrice,\n                    averageHoldTime: holdTime\n                };\n            }\n        }\n        return acc;\n    }, {\n    });\n    // Calculate total stats\n    // Calculate best trade based on collection averages\n    const maxProfit = Math.max(...Object.values(tradesByCollection).map((collection)=>Number(collection.totalProfit)\n    ));\n    const bestTradeCollection = Object.values(tradesByCollection).filter((collection)=>collection.totalProfit == maxProfit && collection.totalProfit > 0\n    )[0];\n    // Calculate worst trade based on collection averages\n    const minProfit = Math.min(...Object.values(tradesByCollection).map((collection)=>Number(collection.totalProfit)\n    ));\n    const worstTradeCollection = Object.values(tradesByCollection).filter((collection)=>collection.totalProfit == minProfit && collection.totalProfit < 0\n    )[0];\n    // Create total stats object\n    const totalTradeStats = {\n        bestTrade: bestTradeCollection,\n        worstTrade: worstTradeCollection\n    };\n    return {\n        tradesByCollection,\n        totalTradeStats\n    };\n};\nconst getEventFromAddress = (event)=>{\n    return event.from_account.address;\n};\nconst getEventToAddress = (event)=>{\n    return event.to_account.address;\n};\nconst getCollectionFromEvent = (event)=>{\n    return {\n        contract_address: event.asset.asset_contract.address,\n        name: event.asset.collection.name,\n        slug: event.asset.collection.slug,\n        image_url: event.asset.collection.image_url,\n        twitter_username: event.asset.collection.twitter_username,\n        discord_url: event.asset.collection.discord_url,\n        external_url: event.asset.collection.external_url\n    };\n};\nconst getAssetFromEvent = (event)=>{\n    return (0,_collections__WEBPACK_IMPORTED_MODULE_2__.pruneAsset)(event.asset);\n};\nconst getEventType = (event)=>{\n    return event.event_type;\n};\nconst pruneEvent = (event)=>{\n    var ref, ref1, ref2, ref3;\n    const prunedEvent = {\n        date: event.created_date,\n        asset: getAssetFromEvent(event),\n        collection: getCollectionFromEvent(event),\n        type: getEventType(event),\n        // If 'successful' it means this is a sale/buy\n        // Retrieve seller/winner data and price\n        ...getEventType(event) === 'successful' && {\n            sellerAddress: event.seller.address,\n            sellerUsername: (ref = event.seller.user) === null || ref === void 0 ? void 0 : ref.username,\n            buyerAddress: event.winner_account.address,\n            buyerUsername: (ref1 = event.winner_account.user) === null || ref1 === void 0 ? void 0 : ref1.username,\n            price: parseFloat(web3__WEBPACK_IMPORTED_MODULE_0___default().utils.fromWei(event.total_price))\n        },\n        // If 'transfer', retrieve from/to data\n        ...getEventType(event) === 'transfer' && {\n            fromAddress: event.from_account.address,\n            fromUsername: (ref2 = event.from_account.user) === null || ref2 === void 0 ? void 0 : ref2.username,\n            toAddress: event.to_account.address,\n            toUsername: (ref3 = event.to_account.user) === null || ref3 === void 0 ? void 0 : ref3.username\n        }\n    };\n    return prunedEvent;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/opensea/events.ts\n");

/***/ }),

/***/ "./pages/api/opensea/events/[address].ts":
/*!***********************************************!*\
  !*** ./pages/api/opensea/events/[address].ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/opensea/events */ \"./lib/opensea/events.ts\");\n\n/**\n * Fetches the sales of the given address using the Opensea API.\n */ const request = async (req, res)=>{\n    res.setHeader('Cache-Control', 's-maxage=1800');\n    const { address: givenAddress  } = req.query;\n    if (typeof givenAddress !== 'string') return res.status(400).json({\n        error: 'address must be given'\n    });\n    console.log(`\\n 🎯 Hit events/ endpoint for ${givenAddress}`);\n    // Use lower case address\n    const ownerAddress = givenAddress.toLowerCase();\n    // Fetch all events\n    const events = await (0,_lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__.getEventsForOwner)(ownerAddress);\n    // Unbundle events (for buying/selling NFT bundles instead of individual NFTs)\n    const unbundledEvents = (0,_lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__.unbundleEvents)(events);\n    // Sort events by sales and buys\n    const { sales , buys  } = (0,_lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__.getEventsBySuccessfulSalesAndBuys)(events, ownerAddress);\n    // Parse events and extract data into usable objects\n    const { tradesByCollection , totalTradeStats  } = (0,_lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__.getTradesByCollectionAndTradeStatsForOwner)(sales, buys);\n    res.status(200).json({\n        tradesByCollection,\n        totalTradeStats,\n        events: unbundledEvents.filter((event)=>event.asset\n        ).map(_lib_opensea_events__WEBPACK_IMPORTED_MODULE_0__.pruneEvent)\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (request);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9hcGkvb3BlbnNlYS9ldmVudHMvW2FkZHJlc3NdLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBT3VDO0FBRXZDLEVBRUc7O0NBQUEsR0FDSCxLQUFLLENBQUNLLE9BQU8sVUFBVUMsR0FBbUIsRUFBRUMsR0FBb0IsR0FBSyxDQUFDO0lBQ3BFQSxHQUFHLENBQUNDLFNBQVMsQ0FBQyxDQUFlLGdCQUFFLENBQWU7SUFDOUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxZQUFZLEVBQUMsQ0FBQyxHQUFHSixHQUFHLENBQUNLLEtBQUs7SUFFM0MsRUFBRSxFQUFFLE1BQU0sQ0FBQ0QsWUFBWSxLQUFLLENBQVEsU0FBRSxNQUFNLENBQUNILEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsRUFBRUMsSUFBSSxDQUFDLENBQUM7UUFBQ0MsS0FBSyxFQUFFLENBQXVCO0lBQUMsQ0FBQztJQUVwR0MsT0FBTyxDQUFDQyxHQUFHLEVBQUUsaUNBQThCLEVBQUVOLFlBQVk7SUFFekQsRUFBeUI7SUFDekIsS0FBSyxDQUFDTyxZQUFZLEdBQUdQLFlBQVksQ0FBQ1EsV0FBVztJQUU3QyxFQUFtQjtJQUNuQixLQUFLLENBQUNDLE1BQU0sR0FBRyxLQUFLLENBQUNuQixzRUFBaUIsQ0FBQ2lCLFlBQVk7SUFFbkQsRUFBOEU7SUFDOUUsS0FBSyxDQUFDRyxlQUFlLEdBQUdsQixtRUFBYyxDQUFDaUIsTUFBTTtJQUU3QyxFQUFnQztJQUNoQyxLQUFLLENBQUMsQ0FBQyxDQUFDRSxLQUFLLEdBQUVDLElBQUksRUFBQyxDQUFDLEdBQUduQixzRkFBaUMsQ0FBQ2dCLE1BQU0sRUFBRUYsWUFBWTtJQUU5RSxFQUFvRDtJQUNwRCxLQUFLLENBQUMsQ0FBQyxDQUFDTSxrQkFBa0IsR0FBRUMsZUFBZSxFQUFDLENBQUMsR0FBR3ZCLCtGQUEwQyxDQUFDb0IsS0FBSyxFQUFFQyxJQUFJO0lBRXRHZixHQUFHLENBQUNLLE1BQU0sQ0FBQyxHQUFHLEVBQUVDLElBQUksQ0FBQyxDQUFDO1FBQ3BCVSxrQkFBa0I7UUFDbEJDLGVBQWU7UUFDZkwsTUFBTSxFQUFFQyxlQUFlLENBQUNLLE1BQU0sRUFBRUMsS0FBSyxHQUFLQSxLQUFLLENBQUNDLEtBQUs7VUFBRUMsR0FBRyxDQUFDeEIsMkRBQVU7SUFDdkUsQ0FBQztBQUNILENBQUM7QUFFRCxpRUFBZUMsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhcGUtbW9uaXRvci93d3cvLi9wYWdlcy9hcGkvb3BlbnNlYS9ldmVudHMvW2FkZHJlc3NdLnRzP2ExNjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCdcbmltcG9ydCB7XG4gIGdldEV2ZW50c0Zvck93bmVyLFxuICBnZXRUcmFkZXNCeUNvbGxlY3Rpb25BbmRUcmFkZVN0YXRzRm9yT3duZXIsXG4gIHVuYnVuZGxlRXZlbnRzLFxuICBnZXRFdmVudHNCeVN1Y2Nlc3NmdWxTYWxlc0FuZEJ1eXMsXG4gIHBydW5lRXZlbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9vcGVuc2VhL2V2ZW50cydcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBzYWxlcyBvZiB0aGUgZ2l2ZW4gYWRkcmVzcyB1c2luZyB0aGUgT3BlbnNlYSBBUEkuXG4gKi9cbmNvbnN0IHJlcXVlc3QgPSBhc3luYyAocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpID0+IHtcbiAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICdzLW1heGFnZT0xODAwJylcbiAgY29uc3QgeyBhZGRyZXNzOiBnaXZlbkFkZHJlc3MgfSA9IHJlcS5xdWVyeVxuXG4gIGlmICh0eXBlb2YgZ2l2ZW5BZGRyZXNzICE9PSAnc3RyaW5nJykgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdhZGRyZXNzIG11c3QgYmUgZ2l2ZW4nIH0pXG5cbiAgY29uc29sZS5sb2coYFxcbiDwn46vIEhpdCBldmVudHMvIGVuZHBvaW50IGZvciAke2dpdmVuQWRkcmVzc31gKVxuXG4gIC8vIFVzZSBsb3dlciBjYXNlIGFkZHJlc3NcbiAgY29uc3Qgb3duZXJBZGRyZXNzID0gZ2l2ZW5BZGRyZXNzLnRvTG93ZXJDYXNlKClcblxuICAvLyBGZXRjaCBhbGwgZXZlbnRzXG4gIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldEV2ZW50c0Zvck93bmVyKG93bmVyQWRkcmVzcylcblxuICAvLyBVbmJ1bmRsZSBldmVudHMgKGZvciBidXlpbmcvc2VsbGluZyBORlQgYnVuZGxlcyBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgTkZUcylcbiAgY29uc3QgdW5idW5kbGVkRXZlbnRzID0gdW5idW5kbGVFdmVudHMoZXZlbnRzKVxuXG4gIC8vIFNvcnQgZXZlbnRzIGJ5IHNhbGVzIGFuZCBidXlzXG4gIGNvbnN0IHsgc2FsZXMsIGJ1eXMgfSA9IGdldEV2ZW50c0J5U3VjY2Vzc2Z1bFNhbGVzQW5kQnV5cyhldmVudHMsIG93bmVyQWRkcmVzcylcblxuICAvLyBQYXJzZSBldmVudHMgYW5kIGV4dHJhY3QgZGF0YSBpbnRvIHVzYWJsZSBvYmplY3RzXG4gIGNvbnN0IHsgdHJhZGVzQnlDb2xsZWN0aW9uLCB0b3RhbFRyYWRlU3RhdHMgfSA9IGdldFRyYWRlc0J5Q29sbGVjdGlvbkFuZFRyYWRlU3RhdHNGb3JPd25lcihzYWxlcywgYnV5cylcblxuICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgdHJhZGVzQnlDb2xsZWN0aW9uLFxuICAgIHRvdGFsVHJhZGVTdGF0cyxcbiAgICBldmVudHM6IHVuYnVuZGxlZEV2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiBldmVudC5hc3NldCkubWFwKHBydW5lRXZlbnQpLFxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0XG4iXSwibmFtZXMiOlsiZ2V0RXZlbnRzRm9yT3duZXIiLCJnZXRUcmFkZXNCeUNvbGxlY3Rpb25BbmRUcmFkZVN0YXRzRm9yT3duZXIiLCJ1bmJ1bmRsZUV2ZW50cyIsImdldEV2ZW50c0J5U3VjY2Vzc2Z1bFNhbGVzQW5kQnV5cyIsInBydW5lRXZlbnQiLCJyZXF1ZXN0IiwicmVxIiwicmVzIiwic2V0SGVhZGVyIiwiYWRkcmVzcyIsImdpdmVuQWRkcmVzcyIsInF1ZXJ5Iiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsImxvZyIsIm93bmVyQWRkcmVzcyIsInRvTG93ZXJDYXNlIiwiZXZlbnRzIiwidW5idW5kbGVkRXZlbnRzIiwic2FsZXMiLCJidXlzIiwidHJhZGVzQnlDb2xsZWN0aW9uIiwidG90YWxUcmFkZVN0YXRzIiwiZmlsdGVyIiwiZXZlbnQiLCJhc3NldCIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/api/opensea/events/[address].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/api/opensea/events/[address].ts"));
module.exports = __webpack_exports__;

})();